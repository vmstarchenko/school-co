# Generated by Django 3.2.8 on 2021-11-02 12:11

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AnnotationType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='человекочитаемое название', max_length=64)),
                ('key', models.CharField(help_text='ключи являются materialized path и позволяют делать из типов аннотаций иерархичную структуру', max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='LearnerTextGenre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='человекочитаемое название жанра', max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='Pupil',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(help_text='ФИО', max_length=128)),
                ('education_level', models.IntegerField(help_text='класс')),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='регион РФ, где живет ученик', max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='название школы в которой учится ученик', max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(help_text='ФИО', max_length=128)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='school_co.school')),
            ],
        ),
        migrations.CreateModel(
            name='ScanText',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_published', models.DateField(auto_now_add=True)),
                ('name', models.CharField(help_text='название текста', max_length=128)),
                ('status', models.IntegerField(choices=[(1, 'New'), (10, 'Checked')])),
                ('marked', models.IntegerField(choices=[(1, 'Marked'), (0, 'Unmarked')])),
                ('genre', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='school_co.learnertextgenre')),
                ('pupil', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='school_co.pupil')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='school_co.teacher')),
            ],
        ),
        migrations.CreateModel(
            name='ScanPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('file', models.ImageField(upload_to='learner_text_scan_page')),
                ('n', models.PositiveSmallIntegerField(help_text='номер страницы')),
                ('object', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='school_co.scantext')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ScanAnnotation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('begin_offset_x', models.PositiveSmallIntegerField(help_text='offset x начала аннотации')),
                ('end_offset_x', models.PositiveSmallIntegerField(help_text='offset x окончания аннотации')),
                ('begin_offset_y', models.PositiveSmallIntegerField(help_text='offset y начала аннотации')),
                ('end_offset_y', models.PositiveSmallIntegerField(help_text='offset y окончания аннотации')),
                ('correct_text', models.TextField(blank=True, help_text='иcправление аннотации (текст с правильный вариантом. Если в изначальном тексте подстроку [offset_begin:offset_end] заменить на исправление, то должен получиться корректный текст)')),
                ('comment', models.TextField(blank=True, default='')),
                ('ann_page', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='school_co.scanpage')),
                ('annotation_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='school_co.annotationtype')),
                ('checker', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='pupil',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='school_co.region'),
        ),
        migrations.AddField(
            model_name='pupil',
            name='school',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='school_co.school'),
        ),
        migrations.AddField(
            model_name='pupil',
            name='teacher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='school_co.teacher'),
        ),
        migrations.CreateModel(
            name='PrintText',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('date_published', models.DateField(auto_now_add=True)),
                ('name', models.CharField(help_text='название текста', max_length=128)),
                ('status', models.IntegerField(choices=[(1, 'New'), (10, 'Checked')])),
                ('marked', models.IntegerField(choices=[(1, 'Marked'), (0, 'Unmarked')])),
                ('genre', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='school_co.learnertextgenre')),
                ('pupil', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='school_co.pupil')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='school_co.teacher')),
            ],
        ),
        migrations.CreateModel(
            name='PrintAnnotation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('begin_offset', models.PositiveSmallIntegerField(help_text='offset начала аннотации')),
                ('end_offset', models.PositiveSmallIntegerField(help_text='offset окончания аннотации')),
                ('correct_text', models.TextField(blank=True, help_text='иcправление аннотации (текст с правильный вариантом. Если в изначальном тексте подстроку [offset_begin:offset_end] заменить на исправление, то должен получиться корректный текст)')),
                ('comment', models.TextField(blank=True, default='')),
                ('annotation_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='school_co.annotationtype')),
                ('checker', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('print_text', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='school_co.printtext')),
            ],
        ),
    ]
